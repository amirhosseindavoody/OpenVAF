//! Generated by `generate_integration_tests`, do not edit by hand.

use std::fs::read;

use sourcegen::{project_root, skip_slow_tests};

use crate::tests::TestDataBase;

#[test]
fn amplifier() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/amplifier.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("AMPLIFIER").join("amplifier.va");
    vfs.add_virt_file("/amplifier.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn asmhemt() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/asmhemt.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("ASMHEMT").join("asmhemt.va");
    vfs.add_virt_file("/asmhemt.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsim3() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsim3.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIM3").join("bsim3.va");
    vfs.add_virt_file("/bsim3.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsim4() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsim4.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIM4").join("bsim4.va");
    vfs.add_virt_file("/bsim4.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsim6() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsim6.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIM6").join("bsim6.va");
    vfs.add_virt_file("/bsim6.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsimbulk() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsimbulk.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIMBULK").join("bsimbulk.va");
    vfs.add_virt_file("/bsimbulk.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsimcmg() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsimcmg.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg.va");
    vfs.add_virt_file("/bsimcmg.va", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg_body.include");
    vfs.add_virt_file("/bsimcmg_body.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg_checking.include");
    vfs.add_virt_file("/bsimcmg_checking.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("BSIMCMG")
        .join("bsimcmg_initialization.include");
    vfs.add_virt_file("/bsimcmg_initialization.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg_macros.include");
    vfs.add_virt_file("/bsimcmg_macros.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg_noise.include");
    vfs.add_virt_file("/bsimcmg_noise.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg_parameters.include");
    vfs.add_virt_file("/bsimcmg_parameters.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimcmg_variables.include");
    vfs.add_virt_file("/bsimcmg_variables.include", read(path).into());
    let path = project_root().join("integration_tests").join("BSIMCMG").join("bsimimg.va");
    vfs.add_virt_file("/bsimimg.va", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimimg_binning.include");
    vfs.add_virt_file("/bsimimg_binning.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimimg_body.include");
    vfs.add_virt_file("/bsimimg_body.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMCMG").join("bsimimg_sp_new.include");
    vfs.add_virt_file("/bsimimg_sp_new.include", read(path).into());
    let path = project_root().join("integration_tests").join("BSIMCMG").join("common_defs.include");
    vfs.add_virt_file("/common_defs.include", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsimimg() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsimimg.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIMIMG").join("bsimimg.va");
    vfs.add_virt_file("/bsimimg.va", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMIMG").join("bsimimg_binning.include");
    vfs.add_virt_file("/bsimimg_binning.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMIMG").join("bsimimg_body.include");
    vfs.add_virt_file("/bsimimg_body.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("BSIMIMG").join("bsimimg_sp_new.include");
    vfs.add_virt_file("/bsimimg_sp_new.include", read(path).into());
    let path = project_root().join("integration_tests").join("BSIMIMG").join("common_defs.include");
    vfs.add_virt_file("/common_defs.include", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn bsimsoi() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/bsimsoi.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("BSIMSOI").join("bsimsoi.va");
    vfs.add_virt_file("/bsimsoi.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn cccs() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/cccs.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("CCCS").join("cccs.va");
    vfs.add_virt_file("/cccs.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn current_source() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/current_source.va", "");
    let mut vfs = db.vfs().write();
    let path =
        project_root().join("integration_tests").join("CURRENT_SOURCE").join("current_source.va");
    vfs.add_virt_file("/current_source.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn diode() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/diode.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("DIODE").join("diode.va");
    vfs.add_virt_file("/diode.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn diode_cmc() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/diode_cmc.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root()
        .join("integration_tests")
        .join("DIODE_CMC")
        .join("DIODE_CMC_InitModel.include");
    vfs.add_virt_file("/DIODE_CMC_InitModel.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("DIODE_CMC")
        .join("DIODE_CMC_SIMKIT_macrodefs.include");
    vfs.add_virt_file("/DIODE_CMC_SIMKIT_macrodefs.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("DIODE_CMC")
        .join("DIODE_CMC_macrodefs.include");
    vfs.add_virt_file("/DIODE_CMC_macrodefs.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("DIODE_CMC")
        .join("DIODE_CMC_parlist.include");
    vfs.add_virt_file("/DIODE_CMC_parlist.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("DIODE_CMC")
        .join("DIODE_CMC_varlist1.include");
    vfs.add_virt_file("/DIODE_CMC_varlist1.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("DIODE_CMC")
        .join("DIODE_CMC_varlist2.include");
    vfs.add_virt_file("/DIODE_CMC_varlist2.include", read(path).into());
    let path = project_root().join("integration_tests").join("DIODE_CMC").join("diode_cmc.va");
    vfs.add_virt_file("/diode_cmc.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn ekv() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/ekv.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("EKV").join("ekv.va");
    vfs.add_virt_file("/ekv.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn ekv_longchannel() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/ekv_longchannel.va", "");
    let mut vfs = db.vfs().write();
    let path =
        project_root().join("integration_tests").join("EKV_LONGCHANNEL").join("ekv_longchannel.va");
    vfs.add_virt_file("/ekv_longchannel.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn hicuml2() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/hicuml2.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("HICUML2").join("hicuml2.va");
    vfs.add_virt_file("/hicuml2.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn hisim2() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/hisim2.va", "");
    let mut vfs = db.vfs().write();
    let path =
        project_root().join("integration_tests").join("HiSIM2").join("HSM2_analyticalPs0.inc");
    vfs.add_virt_file("/HSM2_analyticalPs0.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIM2").join("HSM2_depmos.inc");
    vfs.add_virt_file("/HSM2_depmos.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIM2").join("HSM2_depmos2.inc");
    vfs.add_virt_file("/HSM2_depmos2.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIM2").join("HSM2_depmos3.inc");
    vfs.add_virt_file("/HSM2_depmos3.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIM2").join("HSM2_eval_aging.inc");
    vfs.add_virt_file("/HSM2_eval_aging.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIM2").join("HSM2_eval_newPT.inc");
    vfs.add_virt_file("/HSM2_eval_newPT.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIM2").join("HSM2_iterativePs0.inc");
    vfs.add_virt_file("/HSM2_iterativePs0.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIM2").join("hisim2.va");
    vfs.add_virt_file("/hisim2.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn hisimhv() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/hisimhv.va", "");
    let mut vfs = db.vfs().write();
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_analyticalPs0.inc");
    vfs.add_virt_file("/HSMHV_analyticalPs0.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_depmos.inc");
    vfs.add_virt_file("/HSMHV_depmos.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_depmos2.inc");
    vfs.add_virt_file("/HSMHV_depmos2.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_depmos3.inc");
    vfs.add_virt_file("/HSMHV_depmos3.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_Overlap.inc");
    vfs.add_virt_file("/HSMHV_eval_Overlap.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_aging.inc");
    vfs.add_virt_file("/HSMHV_eval_aging.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_dio.inc");
    vfs.add_virt_file("/HSMHV_eval_dio.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_loverLim.inc");
    vfs.add_virt_file("/HSMHV_eval_loverLim.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_newPT.inc");
    vfs.add_virt_file("/HSMHV_eval_newPT.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_qover.inc");
    vfs.add_virt_file("/HSMHV_eval_qover.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_rdrift.inc");
    vfs.add_virt_file("/HSMHV_eval_rdrift.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_eval_rdrifts.inc");
    vfs.add_virt_file("/HSMHV_eval_rdrifts.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_iterativePs0.inc");
    vfs.add_virt_file("/HSMHV_iterativePs0.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_macrosAndDefs.inc");
    vfs.add_virt_file("/HSMHV_macrosAndDefs.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_module.inc");
    vfs.add_virt_file("/HSMHV_module.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_temp_eval.inc");
    vfs.add_virt_file("/HSMHV_temp_eval.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_temp_eval_dio.inc");
    vfs.add_virt_file("/HSMHV_temp_eval_dio.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_temp_eval_rdri.inc");
    vfs.add_virt_file("/HSMHV_temp_eval_rdri.inc", read(path).into());
    let path =
        project_root().join("integration_tests").join("HiSIMHV").join("HSMHV_temp_eval_rdris.inc");
    vfs.add_virt_file("/HSMHV_temp_eval_rdris.inc", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("hisimhv.va");
    vfs.add_virt_file("/hisimhv.va", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("hisimhv_n4.va");
    vfs.add_virt_file("/hisimhv_n4.va", read(path).into());
    let path = project_root().join("integration_tests").join("HiSIMHV").join("hisimhv_n5.va");
    vfs.add_virt_file("/hisimhv_n5.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn hisimsotb() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/hisimsotb.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("HiSIMSOTB").join("hisimsotb.va");
    vfs.add_virt_file("/hisimsotb.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn mextram() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/mextram.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("MEXTRAM").join("bjt505.va");
    vfs.add_virt_file("/bjt505.va", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("bjtd505.va");
    vfs.add_virt_file("/bjtd505.va", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("bjtd505t.va");
    vfs.add_virt_file("/bjtd505t.va", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("evaluate.inc");
    vfs.add_virt_file("/evaluate.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("frontdef.inc");
    vfs.add_virt_file("/frontdef.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("initialize.inc");
    vfs.add_virt_file("/initialize.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("mextram.va");
    vfs.add_virt_file("/mextram.va", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("noise.inc");
    vfs.add_virt_file("/noise.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("op_print.inc");
    vfs.add_virt_file("/op_print.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("opinfo.inc");
    vfs.add_virt_file("/opinfo.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("opvars.inc");
    vfs.add_virt_file("/opvars.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("parameters.inc");
    vfs.add_virt_file("/parameters.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("tscaling.inc");
    vfs.add_virt_file("/tscaling.inc", read(path).into());
    let path = project_root().join("integration_tests").join("MEXTRAM").join("variables.inc");
    vfs.add_virt_file("/variables.inc", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn mvsg_cmc() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/mvsg_cmc.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("MVSG_CMC").join("mvsg_cmc.va");
    vfs.add_virt_file("/mvsg_cmc.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn psp102() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/psp102.va", "");
    let mut vfs = db.vfs().write();
    let path =
        project_root().join("integration_tests").join("PSP102").join("Common102_macrodefs.include");
    vfs.add_virt_file("/Common102_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("JUNCAP200_InitModel.include");
    vfs.add_virt_file("/JUNCAP200_InitModel.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("JUNCAP200_macrodefs.include");
    vfs.add_virt_file("/JUNCAP200_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("JUNCAP200_parlist.include");
    vfs.add_virt_file("/JUNCAP200_parlist.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("JUNCAP200_varlist1.include");
    vfs.add_virt_file("/JUNCAP200_varlist1.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("JUNCAP200_varlist2.include");
    vfs.add_virt_file("/JUNCAP200_varlist2.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("PSP102_ChargesNQS.include");
    vfs.add_virt_file("/PSP102_ChargesNQS.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("PSP102_InitNQS.include");
    vfs.add_virt_file("/PSP102_InitNQS.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("PSP102_binning.include");
    vfs.add_virt_file("/PSP102_binning.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("PSP102_binpars.include");
    vfs.add_virt_file("/PSP102_binpars.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("PSP102_macrodefs.include");
    vfs.add_virt_file("/PSP102_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP102").join("PSP102_module.include");
    vfs.add_virt_file("/PSP102_module.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("PSP102")
        .join("PSP102_nqs_macrodefs.include");
    vfs.add_virt_file("/PSP102_nqs_macrodefs.include", read(path).into());
    let path = project_root().join("integration_tests").join("PSP102").join("psp102.va");
    vfs.add_virt_file("/psp102.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP102").join("psp102_nqs.va");
    vfs.add_virt_file("/psp102_nqs.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP102").join("psp102b.va");
    vfs.add_virt_file("/psp102b.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP102").join("psp102b_nqs.va");
    vfs.add_virt_file("/psp102b_nqs.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP102").join("psp102e.va");
    vfs.add_virt_file("/psp102e.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP102").join("psp102e_nqs.va");
    vfs.add_virt_file("/psp102e_nqs.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn psp103() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/psp103.va", "");
    let mut vfs = db.vfs().write();
    let path =
        project_root().join("integration_tests").join("PSP103").join("Common103_macrodefs.include");
    vfs.add_virt_file("/Common103_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("JUNCAP200_InitModel.include");
    vfs.add_virt_file("/JUNCAP200_InitModel.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("JUNCAP200_macrodefs.include");
    vfs.add_virt_file("/JUNCAP200_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("JUNCAP200_parlist.include");
    vfs.add_virt_file("/JUNCAP200_parlist.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("JUNCAP200_varlist.include");
    vfs.add_virt_file("/JUNCAP200_varlist.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("PSP103_ChargesNQS.include");
    vfs.add_virt_file("/PSP103_ChargesNQS.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("PSP103_InitNQS.include");
    vfs.add_virt_file("/PSP103_InitNQS.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("PSP103_macrodefs.include");
    vfs.add_virt_file("/PSP103_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("PSP103_module.include");
    vfs.add_virt_file("/PSP103_module.include", read(path).into());
    let path = project_root()
        .join("integration_tests")
        .join("PSP103")
        .join("PSP103_nqs_macrodefs.include");
    vfs.add_virt_file("/PSP103_nqs_macrodefs.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("PSP103_parlist.include");
    vfs.add_virt_file("/PSP103_parlist.include", read(path).into());
    let path =
        project_root().join("integration_tests").join("PSP103").join("PSP103_scaling.include");
    vfs.add_virt_file("/PSP103_scaling.include", read(path).into());
    let path = project_root().join("integration_tests").join("PSP103").join("juncap200.va");
    vfs.add_virt_file("/juncap200.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP103").join("psp103.va");
    vfs.add_virt_file("/psp103.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP103").join("psp103_nqs.va");
    vfs.add_virt_file("/psp103_nqs.va", read(path).into());
    let path = project_root().join("integration_tests").join("PSP103").join("psp103t.va");
    vfs.add_virt_file("/psp103t.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn resistor() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/resistor.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("RESISTOR").join("resistor.va");
    vfs.add_virt_file("/resistor.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
#[test]
fn vccs() {
    if skip_slow_tests() {
        return;
    }
    let db = TestDataBase::new("/vccs.va", "");
    let mut vfs = db.vfs().write();
    let path = project_root().join("integration_tests").join("VCCS").join("vccs.va");
    vfs.add_virt_file("/vccs.va", read(path).into());
    drop(vfs);
    db.lower_and_check();
}
